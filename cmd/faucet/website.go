// Code generated by go-bindata.
// sources:
// faucet.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\x6d\x93\xdb\x36\x92\xfe\x3c\xfe\x15\x1d\x9e\xbd\x92\xce\x22\xa9\x99\xb1\xb3\x73\x12\xa9\x94\xd7\x9b\xdd\xf3\x5d\x2e\x49\x25\x4e\xdd\xa6\xb2\xa9\x2b\x88\x6c\x89\xf0\x80\x00\x03\x80\xd2\xc8\x53\xfa\xef\x57\x0d\x90\x14\xf5\x32\x13\x3b\xf6\xce\x07\x0d\x49\x34\xba\x1b\xdd\x0f\xfa\x05\x64\xf2\xc5\x5f\xbf\x7b\xfd\xf6\xe7\xef\xbf\x86\xc2\x96\x62\xfe\x24\xa1\x7f\x20\x98\x5c\xa5\x01\xca\x60\xfe\xe4\x22\x29\x90\xe5\xf3\x27\x17\x17\x49\x89\x96\x41\x56\x30\x6d\xd0\xa6\x41\x6d\x97\xe1\x4d\xb0\x1f\x28\xac\xad\x42\xfc\xad\xe6\xeb\x34\xf8\x47\xf8\xd3\xab\xf0\xb5\x2a\x2b\x66\xf9\x42\x60\x00\x99\x92\x16\xa5\x4d\x83\x37\x5f\xa7\x98\xaf\xb0\x37\x4f\xb2\x12\xd3\x60\xcd\x71\x53\x29\x6d\x7b\xa4\x1b\x9e\xdb\x22\xcd\x71\xcd\x33\x0c\xdd\xcd\x18\xb8\xe4\x96\x33\x11\x9a\x8c\x09\x4c\x2f\x83\xf9\x13\xe2\x63\xb9\x15\x38\x7f\x55\xdb\x02\xa5\xe5\x19\xb3\x98\xc3\x37\x3f\xfd\xf7\x8f\xdf\xc1\x37\x97\x2f\xe1\x2d\x1a\x2b\xd1\xc2\xdf\x58\x9d\xa1\x4d\x62\x4f\xed\x26\x0a\x2e\x6f\xa1\xd0\xb8\x4c\x03\x52\xdf\x4c\xe3\x38\xcb\xe5\x3b\x13\x65\x42\xd5\xf9\x52\x30\x8d\x51\xa6\xca\x98\xbd\x63\x77\xb1\xe0\x0b\x13\xdb\x0d\xb7\x16\x75\xb8\x50\xca\x1a\xab\x59\x15\x5f\x47\xd7\xd1\x9f\xe3\xcc\x98\xb8\x7b\x16\x95\x5c\x46\x99\x31\x01\x68\x14\x69\x60\xec\x56\xa0\x29\x10\x6d\x00\xf1\xfc\x8f\xc9\x5d\x2a\x69\x43\xb6\x41\xa3\x4a\x8c\x5f\x44\x7f\x8e\x26\x4e\x64\xff\xf1\xe3\x52\x49\xac\xc9\x34\xaf\x2c\x18\x9d\x7d\xb0\xdc\x77\xbf\xd5\xa8\xb7\xf1\x75\x74\x19\x5d\x36\x37\x4e\xce\x3b\x13\xcc\x93\xd8\x33\x9c\x7f\x12\xef\x50\x2a\xbb\x8d\xaf\xa2\x17\xd1\x65\x5c\xb1\xec\x96\xad\x30\x6f\x25\xd1\x50\xd4\x3e\xfc\x6c\x72\x1f\xf2\xe1\xbb\x63\x17\x7e\x0e\x61\xa5\x2a\x51\xda\xe8\x9d\x89\xaf\xa2\xcb\x9b\x68\xd2\x3e\x38\xe5\xef\x04\x90\xd3\x48\xd4\xc5\x42\xe5\x5b\xb8\xa7\xab\x8b\x05\xcb\x6e\x57\x5a\xd5\x32\x9f\x82\x5e\x2d\xd8\xf0\xea\xc5\xcd\x18\xae\x26\xff\x41\x3f\x37\x63\x98\x44\x2f\x2f\x47\x33\x22\xdd\xd1\x4f\xb4\x46\x4d\xbb\x40\x84\x19\x4a\x8b\xba\xe1\x52\x72\x19\x16\xc8\x57\x85\x9d\xc2\xe5\x64\xf2\x6c\x76\xee\xe9\xba\xf0\x8f\x73\x6e\x2a\xc1\xb6\x53\x58\x0a\xbc\xf3\x8f\x98\xe0\x2b\x19\x72\x8b\xa5\x99\x82\xe7\xdc\x93\x59\x69\xb5\xd2\x68\x4c\x23\xac\x52\x86\x5b\xae\xe4\x94\xb0\xc8\x2c\x5f\xe3\x39\x5a\x53\x31\x79\x32\x81\x2d\x8c\x12\xb5\xc5\x23\x45\x16\x42\x65\xb7\xfe\x99\x8b\x05\xfd\x45\x64\x4a\x28\x3d\x85\x4d\xc1\x9b\x69\xe0\x04\x41\xa5\xb1\x61\x0f\x15\xcb\x73\x2e\x57\x53\xf8\xb2\x6a\xd6\x03\x25\xd3\x2b\x2e\xa7\x30\xd9\x4f\x49\xe2\xd6\x01\x49\xec\xc3\xde\x93\x8b\x84\x3c\xe1\xbc\x9f\xf3\x35\x64\x82\x19\x93\x06\x47\x26\x76\xe1\xec\x80\x80\xa2\x18\xe3\xb2\x1d\x3a\x18\xd3\x6a\x13\x80\x13\x94\x06\x5e\x89\xd0\xaa\x6a\x0a\xe1\xf5\xcd\xa4\xba\x9b\x35\x8a\x85\x0b\x65\xad\x2a\xa7\x70\x49\x2a\x37\x6c\x8e\x64\x88\x50\xac\xc2\xcb\xab\x76\xf0\x22\x29\xae\xe7\xff\xa9\x36\x90\x2b\x34\x60\x0b\x6e\x60\xa3\xf4\xed\x57\x49\x5c\x5c\x77\x24\xd5\xfc\x2d\x0d\x7c\xf3\xf3\x3f\x2c\x2c\x5d\x48\x04\x6e\x40\xd7\x52\x72\xb9\x02\x25\xc1\x16\x08\xf7\xf7\xd1\xb7\x68\x69\xf2\x6e\x07\xd2\x5f\x45\xf0\x56\x91\x49\xd7\x28\x2d\x94\x4c\xf0\x8c\xab\xda\x00\xcb\xac\xd2\x06\x96\x5a\x95\x80\x77\x05\xab\x8d\x25\x46\x4c\x08\x60\x6b\xc6\x05\x5b\x08\x84\x65\x2d\x73\x03\x4a\x03\xcb\xb2\xba\xac\x09\x12\x72\x05\x28\x55\xbd\x2a\xbc\x2a\x56\x41\xa9\x6a\x69\x41\x28\xb9\xea\xd4\x31\x15\x2b\x81\x59\xcb\xb2\x5b\x33\x06\x8d\xbf\xd5\x68\xac\x01\xa6\x11\x2c\xc7\x9c\x66\x65\xaa\x2c\x95\x84\x6b\x9d\x43\xc5\xb4\xdd\x82\x51\x19\x67\xa2\xd5\x9a\x24\x12\x5f\x13\xc1\x2b\xb9\x55\x12\xa1\x60\x6b\xa7\x20\xbc\xf5\x71\x80\xd4\xfa\x1b\xcb\x70\xa1\x54\x47\x0d\x25\xdb\xb6\xe2\x1a\xe5\x37\xdc\x16\xdc\x5b\xa7\x42\x5d\xd2\xd4\x1c\x04\x2f\xb9\x35\x51\x12\x57\x9d\x7d\x73\xd1\xfa\x27\x17\x61\xa1\x34\x7f\x4f\x50\x10\x9d\x8f\x2e\x92\xdc\xb6\xde\x6f\x90\xcc\x6a\xab\x3a\xb7\x0b\x5c\xda\x29\xbc\x98\x38\xa7\x27\xbc\x65\xb6\x64\xb0\x64\x61\x13\xba\x02\x60\x9a\xb3\xb0\xe0\x79\x8e\x32\x0d\xac\xae\xb1\x43\x94\x4b\x09\x86\xbf\xc7\x29\x5c\x7b\xe4\x24\x31\x9f\x27\x71\x6e\x7b\x1a\xe4\x47\xf8\xf3\x42\x6f\x6e\xce\xc1\x6f\xd2\x31\x21\x00\x1c\x1a\x65\xcd\x3b\x33\x8e\xa1\x64\xb7\x08\x0c\x12\x76\x94\xda\x1a\xa5\x5d\x60\xe4\x2e\xb9\xc7\x76\x83\x68\xbf\xb2\x78\x67\xd3\x1f\x3c\x43\x2e\x57\xcf\xae\x26\x1e\x90\x74\x41\xec\x9f\x5d\x4d\xb8\xb4\xea\xd9\xd5\x64\x72\x37\xf9\xc0\xbf\x67\x57\x13\x25\x9f\x5d\x4d\x6c\x81\xcf\xae\x26\xcf\xae\xae\xfb\x50\xf6\x4f\xbe\xb6\x05\x6a\xac\x4b\xa2\x42\x43\xd2\x5a\x84\x07\x60\x99\x5e\x51\x75\xf3\x7f\x6c\xa1\x6a\x3b\x5d\x08\x26\x6f\x83\xb9\x53\x37\x89\xd9\xdc\xa1\x00\xb6\xaa\xd6\x1e\xb5\x2c\xcf\x5d\x24\xab\x98\x21\x38\x90\xb6\x0e\x21\x4d\x11\x63\x60\x68\x6a\xed\x42\x37\x41\x8e\xd6\xeb\xf6\xa6\x1c\x10\xc2\xc8\x28\xa3\x28\x59\xe8\x78\xfe\x5a\x55\xdb\xd0\x31\x71\xd3\x4f\x4c\x68\xea\x8a\xaa\xa3\xa8\x6f\x4a\x46\x21\x48\xa0\x89\x6f\x26\x2f\x6f\xbe\x7c\x54\x75\x03\x3f\xfd\xf0\x8d\xd3\xbf\xd3\x90\x2d\xd4\x1a\x81\xcb\xaa\xb6\xb0\x50\x77\xc0\x64\x0e\x4b\xae\x11\xd8\x86\x6d\xbf\x48\xe2\xdc\x05\x3f\xff\x77\x7f\xcf\x97\x10\x7d\xab\xa8\xc2\xda\xed\xfa\x38\x6e\xc0\x49\x0b\x0b\x73\x26\x57\x04\xcd\x3f\x8a\xed\x5a\x52\x88\x0f\x99\xb0\x9f\x01\xde\x8f\x28\xf6\x89\x90\x4f\x8c\xd5\x4a\xae\xe6\x84\x04\x55\x5b\x5a\x60\x5b\x76\x72\x25\x29\x83\xb8\xe1\x31\x18\x5e\x56\x62\x0b\xd9\xde\xb5\xa7\xb8\x79\xd0\x1d\xbf\x8b\x9b\x43\x87\x79\x14\xb9\xc0\x5e\xaa\x1c\x29\xa2\x9b\xda\x64\x58\xb9\xfa\x9b\xc2\xe4\x5f\xb6\xef\x99\xb4\x5c\x62\x1b\x4e\x23\xf8\x4e\x8a\x2d\xd4\x06\x61\xa9\x34\xe4\xb8\xa8\x57\x2b\x97\x02\x34\x54\x9a\xaf\x99\xc5\x36\x86\x9a\x06\x0f\x1d\x1c\x50\xe6\x1d\x0e\x92\x38\x17\xbd\xe4\xf2\xb3\xaa\x21\x63\x12\xac\x66\xd9\xad\xdf\x0b\xb5\xd6\x94\x32\x2a\xf4\xab\xe9\xa2\xf8\x02\x85\xda\x38\x12\xbf\xee\x25\x47\xe1\x42\xba\x41\x84\x42\x6d\xa0\xac\x33\xb7\xd9\x28\x64\xbb\x45\x6c\x18\xb7\x50\x4b\xcb\x85\xb7\xa5\xad\xb5\xa4\x04\x80\x07\x21\xd8\xc3\xf5\x07\xcc\x58\x65\xb3\x82\xed\x76\x09\x96\xf3\xb7\x05\x9e\x49\x77\x5c\xae\xb9\x71\x26\xd2\xf8\xda\x93\x43\xa5\x95\xc5\x8c\x9c\x09\x6c\xc5\xb8\x34\xe4\x11\x17\xe4\xb1\x9c\x1f\xac\x3d\x89\x73\xbe\x6e\xf2\x7b\xef\xf2\xf1\x54\xff\x87\xd2\xfa\x65\xcb\xc4\x01\xda\x95\x62\x5d\x11\x76\xba\x93\x16\xcc\x16\xe7\xf6\x90\x47\xf4\x69\x67\x74\xd8\x39\xb5\x7d\x52\x71\x39\xff\x98\x65\x3e\xbc\x92\x1b\x68\x2e\xd4\x72\x69\xd0\x86\xbd\x85\xf5\x88\x1d\x06\x42\xaa\x73\xab\x5e\xae\xf4\xc8\xe0\x79\x1a\xd4\x5a\x04\x4d\xb3\xe8\x2e\xed\xb6\x6a\xec\x11\x74\xab\x57\xba\x0c\x29\xf4\x6a\x25\x02\xa8\x04\xcb\xb0\x50\x22\x47\x9d\x06\x6d\xae\xaf\x94\xb1\x14\x0c\xc7\xd0\x54\x68\x84\x02\xbf\x2f\x3b\xb3\xd8\xc6\x2c\xcd\x26\x0d\xe2\xbd\x3a\xae\x62\x3d\x55\x38\x5c\x58\xb9\x57\xfa\x22\x59\xd4\xd6\xaa\x8e\x70\x61\x25\x2c\xac\x0c\x73\x5c\xb2\x5a\x58\xc8\xb5\xaa\x72\xb5\xa1\xaa\x6f\xb5\xa2\xee\xd8\x2f\xc5\x4f\x0a\x20\x67\x96\x35\x43\x69\xd0\xd2\xb6\xee\x64\xa6\x52\x55\x5d\xb5\x41\xd1\x3d\xc4\xbb\x8a\xc9\x1c\x73\x72\xbf\x30\x18\xcc\xff\xce\xd7\x08\x25\xba\x50\x73\x71\x0c\x8e\x8c\x69\xb4\x61\x9f\xe7\x09\x44\x92\xd8\xeb\xe2\x57\x04\xcd\x5f\x52\xef\x2b\x9b\x76\x05\x25\xca\x1a\x0e\xee\x42\x4d\xcd\x44\x30\xbf\xbf\xd7\x14\x76\xe1\x29\xcf\xef\xc6\xf0\x94\xf9\xe2\x6e\x9a\x42\xf4\xca\x5d\x9a\x66\x13\x41\xf7\x97\x08\x3e\x4f\xd8\x63\x40\x07\x25\x33\xc1\xb3\xdb\x34\xb0\x1c\x75\x7a\x7f\x4f\xcc\x77\xbb\x19\xb8\x1d\xff\xb4\xbf\xe5\x57\xba\xbd\x8e\xf0\x0e\xb3\xda\xe2\x70\x74\x7f\x8f\xc2\xe0\x6e\x67\xea\x45\xc9\xed\xb0\x9d\x3e\x6a\xf6\x34\xe9\xdc\xe8\xb9\xdb\x41\x4c\x4c\x65\x8e\x77\xf0\x34\xfa\x1e\x35\x57\xb9\x01\x4f\x4f\x79\x34\x89\x05\x3f\x88\x05\xdd\x22\xe2\x5a\xec\xe1\x12\x13\x5e\xe6\xfb\x40\xc9\xd7\xf3\x93\xe0\x74\x66\x2b\xac\xc2\x4e\xfb\x06\x0e\x86\x5b\xbc\xc5\x6d\x1a\xdc\xdf\xf7\xe7\x36\xa3\x19\x13\x82\x9a\xc4\x34\xf0\x4b\xeb\x26\xbd\x47\x82\x69\x13\xe2\xc8\xb7\x5e\x83\x4f\x0d\x61\xae\x5b\xb9\xbe\xea\xc5\xaf\x73\xdb\xfe\xcb\xa3\x6d\x7f\x7d\x96\xb8\x62\x12\x05\xb8\xdf\xd0\x94\xd4\x35\xf8\xeb\x66\xb3\xf4\xcb\xe6\xa3\x49\x21\x35\x66\x9d\x6a\x5d\x83\x37\x99\x81\x5a\xa3\x5e\x0a\xb5\xd9\x57\x1f\x77\x5d\x93\x7b\x3d\x99\xf4\xf5\xbe\xb8\x48\xac\xeb\x50\x28\xc4\xb4\x99\xa9\x0b\x28\x7e\xc8\xfd\x52\x5c\xc9\x51\x1a\xcc\x8f\xac\x41\x12\xc9\xb4\x8e\xaa\xe7\xfa\xce\x98\x67\x75\x5f\x2a\xd5\xf5\x8d\x7d\x35\x0e\x8b\x27\x6a\x71\x83\x79\x62\xf5\x9e\xee\x22\xb1\xf9\x47\x25\x03\x6d\xcc\xc3\xb9\xc0\x07\x34\x5a\x7b\x85\xa8\xfd\x71\x04\x41\x16\xdc\x6d\x12\xdb\xfc\x13\x24\x13\x08\x17\xcc\xe0\x87\x88\x77\xed\xfd\x5e\xbc\xbb\xfd\x54\xf9\x05\x32\x6d\x17\xc8\xce\xd6\x93\xc7\x0a\xb8\xe2\x6e\xaf\x00\x85\xce\x4f\x14\x5f\x4b\xbe\x46\x6d\xb8\xdd\x7e\xa8\x7c\xcc\xf7\x0a\xf8\xfb\x43\x15\x92\xd8\xea\xc7\x91\xd6\xbf\x39\xbb\xb5\xbb\xab\xe6\x62\x7f\xaa\xe5\x86\xe3\x18\xfe\x2e\xd4\x82\x09\x58\x93\xca\x0b\x81\x86\xea\x2e\xca\xa2\x07\xb5\x9c\xb1\xcc\xd6\x06\xd4\xd2\x3d\xf5\x75\x15\xcd\x5f\x33\x4d\xf5\x25\x96\x95\x85\xb4\x39\x59\xa1\x67\x06\xf5\xba\x39\x2f\xa2\x5b\x0a\xdf\x07\xe3\x5d\x4d\x98\xc2\x2f\xbf\xce\x9e\x34\xaa\xfc\x15\x97\xae\x60\x25\x63\xf8\x82\xcc\x16\xcc\x42\xa6\x91\x59\x34\x90\x09\x65\x6a\xed\x35\xa4\x1c\x04\xa4\x65\xcb\xa9\xe5\x4c\x03\x95\x93\xd6\x32\x19\x16\xcc\x14\xa3\xe6\x60\x48\xa3\xab\x21\xbb\xb1\xf6\xf9\x05\xd5\xc4\x43\x62\xc0\xd3\xc9\x0c\x78\xd2\xf2\x8d\x04\xca\x95\x2d\x66\xc0\x9f\x3f\xef\x88\x2f\xf8\x12\x86\x2d\xc5\x2f\xfc\xd7\xc8\xde\x45\x24\x05\xd2\x14\xfa\xd2\x9c\xc0\x86\x8f\xa9\x04\xcf\x70\xc8\xc7\xd0\x1c\xde\xd1\xdf\x42\x23\xbb\x6d\xef\x9a\x10\xed\xff\xb9\xdf\xdd\xec\xd0\x32\xce\xf8\x07\xb6\xf1\x09\xc0\x00\x83\x15\x37\x16\x6a\x2d\xa0\xe9\x30\xbc\x0b\x3a\x87\x38\xba\xbe\x55\x4e\x12\x53\x73\xd1\xa4\x8b\x76\x09\x9e\x4d\x64\x50\xe6\xc3\xff\xfa\xf1\xbb\x6f\x23\x63\x35\x97\x2b\xbe\xdc\x0e\xef\x6b\x2d\xa6\xf0\x74\x18\xfc\x1b\x15\x68\xa3\x5f\x26\xbf\x46\x6b\x26\x6a\x1c\x3b\x7f\x4f\xdd\xef\x89\x94\x31\x34\x97\x53\x38\x14\xb8\x1b\x8d\x66\xe7\x93\x65\x2f\xb7\x6b\x34\x68\x87\x44\xd8\xe5\xb4\x63\x1b\x31\x28\xd1\x16\xca\x35\x16\x1a\x33\x25\x25\x66\x16\xea\x4a\xc9\xc6\x24\x20\x94\x31\x7b\x20\xb6\x14\xe9\x29\x28\x1a\xfa\x14\x24\x6e\xe0\x7f\x71\xf1\xa3\xca\x6e\xd1\x0e\x87\xc3\x0d\x97\xb9\xda\x44\x42\xf9\x26\x30\xa2\x16\x42\x65\x4a\x40\x9a\xa6\xd0\x34\xf1\xc1\x08\xbe\x82\x60\x63\xa8\x9d\x0f\x60\x4a\x97\x74\x35\x82\xe7\x70\x3c\xbd\xa0\x22\xf5\x39\x04\x31\xab\x78\x30\xf2\xdb\xa1\x35\xbc\x92\x25\x1a\xc3\x56\xd8\x57\xd0\x9d\xc9\x75\x20\xa3\x75\x94\x66\x05\x29\x38\x07\x55\x4c\x1b\xf4\x24\x11\x85\xe4\x16\x6d\x84\x59\x47\x96\xa6\x20\x6b\x21\xf6\x20\xf5\x9b\x62\xd6\xc2\xef\x80\x3c\xf2\x5d\xf0\x17\x69\x0a\x14\xa1\xc8\xc4\xf9\x7e\x26\x39\xdf\x47\xd2\x51\x44\x41\x72\x3f\x63\x34\xeb\xa3\xf9\x80\x1b\xe6\xbf\xc7\x0e\xf3\x63\x7e\x98\x3f\xc0\xd0\x25\xae\xc7\xf8\xf9\x44\xd7\x63\xe7\x1e\x3c\xc0\x4d\xd6\xe5\x02\xf5\x63\xec\x7c\xe2\x6a\xd8\x39\x53\xbf\x91\xb6\x37\x77\x0c\x97\x5f\x8e\x1e\xe0\x8e\x5a\xab\x07\x99\x4b\x65\xb7\xc3\x7b\xc1\xb6\xaa\xb6\x53\x18\x58\x55\xbd\x76\x99\x66\x30\x76\xe7\x01\x53\xe8\x38\x8c\x5d\x03\x31\x85\x81\xbb\xa3\x71\x5e\xa2\x9b\xf5\x72\x32\x99\x8c\xa1\x3d\x6f\xff\x0b\xa3\x4d\xa8\x6b\xdc\x3d\xa0\x8f\xa9\xb3\x0c\xcd\x83\xd6\xfb\x20\x8d\x1a\x1e\x9d\x4e\xcd\xfd\x27\x68\xd5\xe5\x86\x03\xb5\xe0\x4f\x7f\x82\x93\xd1\x43\x18\xc7\x31\xfc\x0f\xd3\xb7\xee\x28\xba\xd2\xb8\x76\xc7\xd5\x1d\x7d\xc9\x8d\x71\xe7\xc0\x06\x72\x25\xb1\x99\xf3\x71\x61\xff\x44\xc7\x86\x0c\xe6\x30\x39\x56\x90\xc2\x61\x2f\x2d\x9c\xc9\x16\x3d\xbe\x87\x89\xe0\x62\xd7\x97\x77\x30\x93\x97\x08\x5f\xa4\x10\x04\xfd\xc9\x27\x14\x44\xd0\x31\xbb\x30\x68\xdf\x7a\x5f\x0c\x9b\xec\x78\x2e\x77\x8d\xc6\x54\x2b\x4f\x46\x27\x4a\xec\xf6\xe6\x7d\x55\x55\x28\x73\x60\x72\xeb\x42\x62\x67\x5b\x77\xac\x45\x4d\x35\x85\x34\x41\x7d\x80\xf0\x27\x2a\xcd\x54\x32\x70\x73\x6e\x9f\x42\x78\x39\x3b\x93\x45\x7b\x96\xec\x2d\xed\xd8\x3d\x67\x6c\x7f\xec\xa2\x43\x9b\x1d\x11\x87\x97\x07\x4e\x39\xf0\xd7\x79\xc7\x5c\x74\x7a\xf3\xbd\x45\x8f\xdc\xb5\xf7\xd7\xb1\xcd\x7a\xfa\x7b\x3e\xcf\x2f\x3f\x70\x19\xdd\x70\x55\x9b\x62\x78\xa4\xe8\x68\x76\xea\x9b\x37\x16\x35\xb3\xe8\x9a\x21\xe7\x0b\x94\x96\x6b\x3c\x71\x89\x3b\x48\xd4\x18\x6a\x94\x39\xea\xb6\xa4\xf0\xe7\x8e\x54\x00\x1e\xb8\xcc\x9d\x6a\x1f\xc0\xa9\xb7\xa2\x13\xdb\xce\x80\xc3\x9c\xca\x3c\xe0\x61\xd8\x5b\x8b\xab\xcb\x94\x44\x6a\x98\x8f\x76\x82\x43\xeb\x01\x5c\x89\x18\x05\xab\x0c\xe6\x90\x82\x7f\x7b\x3a\x1c\x45\xb5\xe4\x77\xc3\x51\xd8\xdc\x1f\xf3\x68\xc7\x67\xdd\x19\x76\xab\xfb\xf3\x14\x82\xc4\x6a\xaa\xb9\x07\x01\x3c\x3f\xb7\x0f\x29\xf5\x0e\xe6\x7b\x0d\xfa\x53\x01\x12\x9b\xcf\x5d\x3f\xe7\x7b\x81\x7f\x06\xfd\xd7\xb3\xb5\x16\xc3\x13\xb6\x6c\xcd\x2c\xd3\x8e\xeb\x68\x06\x7b\xf2\xe6\x18\x3b\x23\x0f\xcd\xc0\xb7\x7c\xae\xab\x86\xae\x59\x75\x77\x0b\xa5\x73\xd4\xa1\x66\x39\xaf\xcd\x14\x5e\x54\x77\xb3\x7f\xb6\xcd\xbc\x6b\x10\x1e\x55\xb5\xd2\x38\x3f\xd1\xa8\x79\xcb\xf5\x1c\x82\x24\x26\x82\xdf\x63\xd3\x2d\xb6\xff\xee\x15\xce\xb4\x41\xd0\xbd\x19\x6d\x9e\x97\x3c\xcf\x05\x92\xc2\x7b\xf6\xb4\x23\xc9\xff\xfd\x7d\x75\x28\x12\x9a\xfe\x67\x3f\x67\x07\x28\x0c\x3e\x32\xa1\x6b\xa5\x06\x04\x80\x90\x96\xcc\x9d\xcd\x9b\xae\xcc\x3d\xd6\x03\x67\x8b\xe6\x1d\x7c\x5e\x6b\x57\x70\x0d\xc3\x06\x60\x63\x18\x18\x2a\x00\x73\x33\x18\x45\x45\x5d\x32\xc9\xdf\xe3\x90\x92\xd3\xc8\xdb\xca\xf5\x66\xc1\x69\x5c\x3e\x51\x66\xdf\xf0\x0f\xda\x44\x37\x68\x8c\x38\x68\xbd\xfb\x62\xff\xea\x61\x0a\x93\xd9\xe0\x23\x2d\x74\x5e\x4a\xb8\x60\x1a\xfa\x37\x61\x9b\x81\x41\x2b\x92\xde\x8e\x2d\x98\x1e\xf8\xbe\xd4\x15\xe9\x52\x6d\xd2\xc1\xf5\xa4\x53\xd2\x3b\xda\xf9\x79\xd0\x60\xed\xc4\x19\xa4\x65\xbb\x35\xe7\x70\x3d\xf9\x1c\xda\xfa\x97\x35\x47\x2b\xb0\x9a\x57\x98\x03\xcb\x2c\x5f\xe3\xbf\x60\x21\x9f\xc1\xc8\x1f\xad\x22\xe1\xb0\x35\x9e\x83\xe9\x81\xbe\x34\xda\xd9\xf6\xdf\x69\xbf\x41\xec\x2c\xfc\x1c\x82\xb3\x0b\x79\x10\x89\x47\x84\x47\x5b\xfb\xe1\x7d\xef\x0e\x1b\x82\xe3\xc4\x42\x25\x6f\x77\x4c\x36\x8a\x0a\x5b\x8a\x61\x90\x58\xf7\x8d\x04\xe9\xdc\x71\x70\x0c\xfc\xe3\xc3\xba\x6e\x77\xd8\xcd\x50\x13\x8f\x47\xcd\x16\xf4\x2a\x94\xae\x21\x6b\xcb\x11\xd8\xed\x3f\x25\x89\x63\xf8\xd1\x32\x6d\x81\xc1\x4f\x6f\xa0\xae\x72\x66\x29\x85\x29\xa0\x24\xe9\x5f\xd5\xb7\xdf\x9a\x2c\x98\x36\xb0\x54\x7a\xc3\x74\xde\xbc\x42\xb2\x05\x6e\xdd\xa7\x04\x6d\xfd\x67\xd0\xbe\xa1\x28\xb6\x66\x62\x78\xd2\xfc\x3d\x1d\x0e\xa2\xbe\xcb\x07\xa3\x08\x59\x56\x9c\x12\xba\x8c\xd5\xc9\x4d\xe1\x5b\xd7\x07\x0c\x9f\x0e\x6d\xc1\xcd\x28\x62\xd6\xea\xe1\xe0\x00\x0c\x83\x11\xf9\xf5\xb2\xd7\x97\x75\xd3\x93\x83\x6d\xf5\x18\x8f\x7d\x45\xdd\x55\x03\x2d\x79\x66\xcc\xd0\xe3\x6a\x30\xee\xf1\x3e\x84\xd5\xe0\xd9\xa0\x73\xd4\x7e\x7b\xef\xd7\x91\x9e\xd5\xe4\x80\xf5\x80\x76\xd9\xe0\x44\x3c\xcb\xf3\xd7\xb4\x7f\x86\xc1\x99\x9d\x7e\x8c\x8e\x51\x67\x6c\x1f\xaf\x1f\xb5\xb2\x3f\xa0\x7f\xc0\xc4\x3c\x1f\x8c\x22\x53\x2f\xfc\x01\xc5\xf0\x65\xd7\x85\xb5\x64\x0e\xbc\xc7\xa9\xe0\xa4\xa0\x20\x11\x87\x45\x45\x78\x54\x84\x3c\x92\x35\x1a\x91\x7e\x55\xbb\x31\x19\x7c\x32\xea\xce\xb7\xbe\x36\x54\x61\x71\x53\x00\x83\x0d\x2e\x8c\x3b\x4e\x80\x06\xef\xee\x48\xc7\x1f\xdd\xbc\xfa\xfe\x4d\xef\xf8\xa6\xdb\x11\x43\xc7\xbd\xfb\x80\xec\xdc\x61\xc9\xd9\x2f\xd6\x36\x9b\x4d\xb4\x52\x6a\x25\xfc\xb7\x6a\xdd\x69\x4a\xcc\x2a\x1e\xbd\x33\x01\x30\xb3\x95\x19\xe4\xb8\x44\x3d\xef\xb1\x6f\x8e\x58\x92\xd8\x7f\x11\x95\xc4\xfe\x93\xd1\xff\x0f\x00\x00\xff\xff\x0e\x25\xd0\x7e\x43\x2a\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
