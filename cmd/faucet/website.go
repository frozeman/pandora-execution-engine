// Code generated by go-bindata.
// sources:
// faucet.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\x6d\x93\xdb\x36\x92\xfe\x3c\xfe\x15\x1d\x9e\xbd\x92\xce\x22\xa9\x99\xb1\xb3\x73\x12\xa9\x94\xd7\x9b\xdd\xf3\x5d\x2e\x49\x25\x4e\xdd\xa6\xb2\xa9\x2b\x88\x6c\x89\xf0\x80\x00\x03\x80\xd2\xc8\x53\xfa\xef\x57\x0d\x90\x14\xf5\x32\x13\x3b\xf6\xce\x07\x0d\x49\x34\xba\x1b\xdd\x0f\xfa\x05\x64\xf2\xc5\x5f\xbf\x7b\xfd\xf6\xe7\xef\xbf\x86\xc2\x96\x62\xfe\x24\xa1\x7f\x20\x98\x5c\xa5\x01\xca\x60\xfe\xe4\x22\x29\x90\xe5\xf3\x27\x17\x17\x49\x89\x96\x41\x56\x30\x6d\xd0\xa6\x41\x6d\x97\xe1\x4d\xb0\x1f\x28\xac\xad\x42\xfc\xad\xe6\xeb\x34\xf8\x47\xf8\xd3\xab\xf0\xb5\x2a\x2b\x66\xf9\x42\x60\x00\x99\x92\x16\xa5\x4d\x83\x37\x5f\xa7\x98\xaf\xb0\x37\x4f\xb2\x12\xd3\x60\xcd\x71\x53\x29\x6d\x7b\xa4\x1b\x9e\xdb\x22\xcd\x71\xcd\x33\x0c\xdd\xcd\x18\xb8\xe4\x96\x33\x11\x9a\x8c\x09\x4c\x2f\x83\xf9\x13\xe2\x63\xb9\x15\x38\x7f\x55\xdb\x02\xa5\xe5\x19\xb3\x98\xc3\x37\x3f\xfd\xf7\x8f\xdf\xc1\x37\x97\x2f\xe1\x2d\x1a\x2b\xd1\xc2\xdf\x58\x9d\xa1\x4d\x62\x4f\xed\x26\x0a\x2e\x6f\xa1\xd0\xb8\x4c\x03\x52\xdf\x4c\xe3\x38\xcb\xe5\x3b\x13\x65\x42\xd5\xf9\x52\x30\x8d\x51\xa6\xca\x98\xbd\x63\x77\xb1\xe0\x0b\x13\xdb\x0d\xb7\x16\x75\xb8\x50\xca\x1a\xab\x59\x15\x5f\x47\xd7\xd1\x9f\xe3\xcc\x98\xb8\x7b\x16\x95\x5c\x46\x99\x31\x01\x68\x14\x69\x60\xec\x56\xa0\x29\x10\x6d\x00\xf1\xfc\x8f\xc9\x5d\x2a\x69\x43\xb6\x41\xa3\x4a\x8c\x5f\x44\x7f\x8e\x26\x4e\x64\xff\xf1\xe3\x52\x49\xac\xc9\x34\xaf\x2c\x18\x9d\x7d\xb0\xdc\x77\xbf\xd5\xa8\xb7\xf1\x75\x74\x19\x5d\x36\x37\x4e\xce\x3b\x13\xcc\x93\xd8\x33\x9c\x7f\x12\xef\x50\x2a\xbb\x8d\xaf\xa2\x17\xd1\x65\x5c\xb1\xec\x96\xad\x30\x6f\x25\xd1\x50\xd4\x3e\xfc\x6c\x72\x1f\xf2\xe1\xbb\x63\x17\x7e\x0e\x61\xa5\x2a\x51\xda\xe8\x9d\x89\xaf\xa2\xcb\x9b\x68\xd2\x3e\x38\xe5\xef\x04\x90\xd3\x48\xd4\xc5\x42\xe5\x5b\xb8\xa7\xab\x8b\x05\xcb\x6e\x57\x5a\xd5\x32\x9f\x82\x5e\x2d\xd8\xf0\xea\xc5\xcd\x18\xae\x26\xff\x41\x3f\x37\x63\x98\x44\x2f\x2f\x47\x33\x22\xdd\xd1\x4f\xb4\x46\x4d\xbb\x40\x84\x19\x4a\x8b\xba\xe1\x52\x72\x19\x16\xc8\x57\x85\x9d\xc2\xe5\x64\xf2\x6c\x76\xee\xe9\xba\xf0\x8f\x73\x6e\x2a\xc1\xb6\x53\x58\x0a\xbc\xf3\x8f\x98\xe0\x2b\x19\x72\x8b\xa5\x99\x82\xe7\xdc\x93\x59\x69\xb5\xd2\x68\x4c\x23\xac\x52\x86\x5b\xae\xe4\x94\xb0\xc8\x2c\x5f\xe3\x39\x5a\x53\x31\x79\x32\x81\x2d\x8c\x12\xb5\xc5\x23\x45\x16\x42\x65\xb7\xfe\x99\x8b\x05\xfd\x45\x64\x4a\x28\x3d\x85\x4d\xc1\x9b\x69\xe0\x04\x41\xa5\xb1\x61\x0f\x15\xcb\x73\x2e\x57\x53\xf8\xb2\x6a\xd6\x03\x25\xd3\x2b\x2e\xa7\x30\xd9\x4f\x49\xe2\xd6\x01\x49\xec\xc3\xde\x93\x8b\x84\x3c\xe1\xbc\x9f\xf3\x35\x64\x82\x19\x93\x06\x47\x26\x76\xe1\xec\x80\x80\xa2\x18\xe3\xb2\x1d\x3a\x18\xd3\x6a\x13\x80\x13\x94\x06\x5e\x89\xd0\xaa\x6a\x0a\xe1\xf5\xcd\xa4\xba\x9b\x35\x8a\x85\x0b\x65\xad\x2a\xa7\x70\x49\x2a\x37\x6c\x8e\x64\x88\x50\xac\xc2\xcb\xab\x76\xf0\x22\x29\xae\xdb\x41\x8b\x77\xb6\xd3\xee\x3f\xd5\x06\x72\x85\x06\x6c\xc1\x0d\x6c\x94\xbe\xfd\x2a\x89\x8b\xeb\x6e\x5a\x35\x7f\x4b\x03\xdf\xfc\xfc\x0f\x0b\x4b\x17\x26\x81\x1b\xd0\xb5\x94\x5c\xae\x40\x49\xb0\x05\xc2\xfd\x7d\xf4\x2d\x5a\x9a\xbc\xdb\x81\xf4\x57\x11\xbc\x55\x64\xe6\x35\x4a\x0b\x25\x13\x3c\xe3\xaa\x36\xc0\x32\xab\xb4\x81\xa5\x56\x25\xe0\x5d\xc1\x6a\x63\x89\x11\x13\x02\xd8\x9a\x71\xc1\x16\x02\x61\x59\xcb\xdc\x80\xd2\xc0\xb2\xac\x2e\x6b\x82\x89\x5c\x01\x4a\x55\xaf\x0a\xaf\x8a\x55\x50\xaa\x5a\x5a\x10\x4a\xae\x3a\x75\x4c\xc5\x4a\x60\xd6\xb2\xec\xd6\x8c\x41\xe3\x6f\x35\x1a\x6b\x80\x69\x04\xcb\x31\xa7\x59\x99\x2a\x4b\x25\xe1\x5a\xe7\x50\x31\x6d\xb7\x60\x54\xc6\x99\x68\xb5\x26\x89\xc4\xd7\x44\xf0\x4a\x6e\x95\x44\x28\xd8\xda\x29\x08\x6f\x7d\x6c\x20\xb5\xfe\xc6\x32\x5c\x28\xd5\x51\x43\xc9\xb6\xad\xb8\x46\xf9\x0d\xb7\x05\xf7\xd6\xa9\x50\x97\x34\x35\x07\xc1\x4b\x6e\x4d\x94\xc4\x55\x67\xdf\x5c\xb4\x6e\xc9\x45\x58\x28\xcd\xdf\x13\x3c\x44\xe7\xb7\x8b\x24\xb7\x2d\x22\x1a\x74\xb3\xda\xaa\x0e\x0a\x02\x97\x76\x0a\x2f\x26\x0e\x08\x09\x6f\x99\x2d\x19\x2c\x59\xd8\x84\xb3\x00\x98\xe6\x2c\x2c\x78\x9e\xa3\x4c\x03\xab\x6b\xec\x50\xe6\xd2\x84\xe1\xef\x71\x0a\xd7\x1e\x4d\x49\xcc\xe7\x49\x9c\xdb\x9e\x06\xf9\x11\x26\xbd\xd0\x9b\x9b\x73\x90\x9c\x74\x4c\x08\x00\x87\x46\x59\xf3\xce\x8c\x63\x28\xd9\x2d\x02\x83\x84\x1d\xa5\xbb\x46\x69\x17\x2c\xb9\x4b\xf8\xb1\xdd\x20\xda\xaf\x08\xb7\xe9\x0f\x9e\x21\x97\xab\x67\x57\x13\x0f\x48\xba\x20\xf6\xcf\xae\x26\x5c\x5a\xf5\xec\x6a\x32\xb9\x9b\x7c\xe0\xdf\xb3\xab\x89\x92\xcf\xae\x26\xb6\xc0\x67\x57\x93\x67\x57\xd7\x7d\x28\xfb\x27\x5f\xdb\x02\x35\xd6\x25\x51\xa1\x21\x69\x2d\xc2\x03\xb0\x4c\xaf\xa8\xe2\xf9\x3f\xb6\x50\xb5\x9d\x2e\x04\x93\xb7\xc1\xdc\xa9\x9b\xc4\x6c\xee\x50\x00\x5b\x55\x6b\x8f\x5a\x96\xe7\x2e\xba\x55\xcc\x10\x1c\x48\x5b\x87\x90\xa6\xb0\x31\x30\x34\xb5\x76\xe1\x9c\x20\x47\xeb\x75\x7b\x53\x0e\x08\x61\x64\x94\x51\x94\x2c\x74\x3c\x7f\xad\xaa\x6d\xe8\x98\xb8\xe9\x27\x26\x34\x75\x45\x15\x53\xd4\x37\x25\xa3\xb0\x24\xd0\xc4\x37\x93\x97\x37\x5f\x3e\xaa\xba\x81\x9f\x7e\xf8\xc6\xe9\xdf\x69\xc8\x16\x6a\x8d\xc0\x65\x55\x5b\x58\xa8\x3b\x60\x32\x87\x25\xd7\x08\x6c\xc3\xb6\x5f\x24\x71\xee\x02\xa2\xff\xbb\xbf\xe7\x4b\x88\xbe\x55\x54\x75\xed\x76\x7d\x1c\xf7\x03\x50\xce\xe4\x8a\xa0\xf9\x47\xb1\x5d\x4b\x0a\xfb\x21\x13\xf6\x33\xc0\xfb\x11\xc5\x3e\x11\xf2\x89\xb1\x5a\xc9\xd5\x9c\x90\xa0\x6a\x4b\x0b\x6c\x4b\x51\xae\x24\x65\x15\x37\x3c\x06\xc3\xcb\x4a\x6c\x21\xdb\xbb\xf6\x14\x37\x0f\xba\xe3\x77\x71\x73\xe8\x30\x8f\x22\x17\xd8\x4b\x95\x23\x45\x74\x53\x9b\x0c\x2b\x57\x93\x53\x98\xfc\xcb\xf6\x3d\x93\x96\x4b\x6c\xc3\x69\x04\xdf\x49\xb1\x85\xda\x20\x2c\x95\x86\x1c\x17\xf5\x6a\xe5\x52\x80\x86\x4a\xf3\x35\xb3\xd8\xc6\x50\xd3\xe0\xa1\x83\x03\xca\xbc\xc3\x41\x12\xe7\xa2\x97\x5c\x7e\x56\x35\x64\x4c\x82\xd5\x2c\xbb\xf5\x7b\xa1\xd6\x9a\x52\x46\x85\x7e\x35\x5d\x14\x5f\xa0\x50\x1b\x47\xe2\xd7\xbd\xe4\x28\x5c\x48\x37\x88\x50\xa8\x0d\x94\x75\xe6\x36\x1b\x85\x6c\xb7\x88\x0d\xe3\x16\x6a\x69\xb9\xf0\xb6\xb4\xb5\x96\x94\x00\xf0\x20\x04\x7b\xb8\xfe\x80\x19\xab\x6c\x56\xb0\xdd\x2e\xc1\x72\xfe\xb6\xc0\x33\xe9\x8e\xcb\x35\x37\xce\x44\x1a\x5f\x7b\x72\xa8\xb4\xb2\x98\x91\x33\x81\xad\x18\x97\x86\x3c\xe2\x82\x3c\x96\xf3\x83\xb5\x27\x71\xce\xd7\x4d\xce\xef\x5d\x3e\x9e\xfe\xff\x50\xaa\xbf\x6c\x99\x38\x40\xbb\xf2\xac\x2b\xcc\x4e\x77\xd2\x82\xd9\xe2\xdc\x1e\xf2\x88\x3e\xed\x96\x0e\xbb\xa9\xb6\x77\x2a\x2e\xe7\x1f\xb3\xcc\x87\x57\x72\x03\xcd\x85\x5a\x2e\x0d\xda\xb0\xb7\xb0\x1e\xb1\xc3\x40\x48\xb5\x6f\xd5\xcb\x95\x1e\x19\x3c\x4f\x83\x5a\x8b\xa0\x69\x20\xdd\xa5\xdd\x56\x8d\x3d\x82\x6e\xf5\x4a\x97\x21\x85\x5e\xad\x44\x00\x95\x60\x19\x16\x4a\xe4\xa8\xd3\xa0\xcd\xf5\x95\x32\x96\x82\x21\x34\x45\x1b\x81\xc0\x6f\xcb\xce\x2a\xb6\xb1\x4a\xb3\x47\x83\x78\xaf\x8d\x2b\x62\x4f\xf5\x0d\x17\x56\xee\x75\xbe\x48\x16\xb5\xb5\xaa\x23\x5c\x58\x09\x0b\x2b\xc3\x1c\x97\xac\x16\x16\x72\xad\xaa\x5c\x6d\xa8\x10\x5c\xad\xa8\x61\xf6\x2b\xf1\x93\x02\xc8\x99\x65\xcd\x50\x1a\xb4\xb4\xad\x37\x99\xa9\x54\x55\x57\x6d\x4c\x74\x0f\xf1\xae\x62\x32\xc7\x9c\xbc\x2f\x0c\x06\xf3\xbf\xf3\x35\x42\x89\x2e\xd2\x5c\x1c\x63\x23\x63\x1a\x6d\xd8\xe7\x79\x82\x90\x24\xf6\xba\xf8\x15\x41\xf3\x97\xd4\xfb\xc2\xa6\x5d\x41\x89\xb2\x86\x83\xbb\x50\x53\x7f\x11\xcc\xef\xef\x35\x45\x5d\x78\xca\xf3\xbb\x31\x3c\x65\xbe\xb6\x9b\xa6\x10\xbd\x72\x97\xa6\xd9\x43\xd0\xfd\x25\x82\xcf\x13\xf6\x18\xce\x41\xc9\x4c\xf0\xec\x36\x0d\x2c\x47\x9d\xde\xdf\x13\xf3\xdd\x6e\x06\x6e\xc3\x3f\xed\xef\xf8\x95\x6e\xaf\x23\xbc\xc3\xac\xb6\x38\x1c\xdd\xdf\xa3\x30\xb8\xdb\x99\x7a\x51\x72\x3b\x6c\xa7\x8f\x9a\x2d\x4d\x3a\x37\x7a\xee\x76\x10\x13\x53\x99\xe3\x1d\x3c\x8d\xbe\x47\xcd\x55\x6e\xc0\xd3\x53\x1a\x4d\x62\xc1\x0f\x42\x41\xb7\x88\xb8\x16\x7b\xb8\xc4\x84\x97\xf9\x3e\x4e\xf2\xf5\xfc\x24\x36\x9d\xd9\x09\xab\xb0\xd3\xbe\x81\x83\xe1\x16\x6f\x71\x9b\x06\xf7\xf7\xfd\xb9\xcd\x68\xc6\x84\xa0\xbe\x31\x0d\xfc\xd2\xba\x49\xef\x91\x60\xda\x44\x38\xf2\xad\xd7\xe0\x53\x23\x98\x6b\x60\xae\xaf\x7a\xe1\xeb\xdc\xae\xff\xf2\x68\xd7\x5f\x9f\x25\xae\x98\x44\x01\xee\x37\x34\x25\x35\x0d\xfe\xba\xd9\x2c\xfd\xaa\xf9\x68\x52\x48\xbd\x5a\xa7\x5a\xd7\xf3\x4d\x66\xa0\xd6\xa8\x97\x42\x6d\xf6\xc5\xc7\x5d\xd7\xf7\x5e\x4f\x26\x7d\xbd\x2f\x2e\x12\xeb\x1a\x14\x8a\x30\x6d\x62\xea\xe2\x89\x1f\x72\xbf\x14\x56\x72\x94\x06\xf3\x23\x6b\x90\x44\x32\xad\xa3\xea\xb9\xbe\x33\xe6\x59\xdd\x97\x4a\x75\xad\x64\x5f\x8d\xc3\xda\x89\xba\xde\x60\x9e\x58\xbd\xa7\xbb\x48\x6c\xfe\x51\xb9\x40\x1b\xf3\x70\x2a\xf0\x01\x8d\xd6\x5e\x21\x6a\x7f\x42\x41\x90\x05\x77\x9b\xc4\x36\xff\x04\xc9\x04\xc2\x05\x33\xf8\x21\xe2\x5d\xc7\xbf\x17\xef\x6e\x3f\x55\x7e\x81\x4c\xdb\x05\xb2\xb3\xe5\xe4\xb1\x02\xae\xb6\xdb\x2b\x40\xa1\xf3\x13\xc5\xd7\x92\xaf\x51\x1b\x6e\xb7\x1f\x2a\x1f\xf3\xbd\x02\xfe\xfe\x50\x85\x24\xb6\xfa\x71\xa4\xf5\x6f\xce\x6e\xed\xee\xaa\xb9\xd8\x1f\x74\xb9\xe1\x38\x86\xbf\x0b\xb5\x60\x02\xd6\xa4\xf2\x42\xa0\xa1\xb2\x8b\x92\xe8\x41\x29\x67\x2c\xb3\xb5\x01\xb5\x74\x4f\x7d\x59\x45\xf3\xd7\x4c\x53\x79\x89\x65\x65\x21\x6d\x0e\x5b\xe8\x99\x41\xbd\x6e\x8e\x90\xe8\x96\xc2\xf7\xc1\x78\x57\x12\xa6\xf0\xcb\xaf\xb3\x27\x8d\x2a\x7f\xc5\xa5\xab\x57\xc9\x18\xbe\x1e\xb3\x05\xb3\x90\x69\x64\x16\x0d\x64\x42\x99\x5a\x7b\x0d\x29\x07\x01\x69\xd9\x72\x6a\x39\xd3\x40\xe5\xa4\xb5\x4c\x86\x05\x33\xc5\xa8\x39\x2b\xd2\xe8\x4a\xc8\x6e\xac\x7d\x7e\x41\x25\xf1\x90\x18\xf0\x74\x32\x03\x9e\xb4\x7c\x23\x81\x72\x65\x8b\x19\xf0\xe7\xcf\x3b\xe2\x0b\xbe\x84\x61\x4b\xf1\x0b\xff\x35\xb2\x77\x11\x49\x81\x34\x85\xbe\x34\x27\xb0\xe1\x63\x2a\xc1\x33\x1c\xf2\x31\x34\xe7\x79\xf4\xb7\xd0\xc8\x6e\xdb\xbb\x26\x44\xfb\x7f\xee\x77\x37\x3b\xb4\x8c\x33\xfe\x81\x6d\x7c\x02\x30\xc0\x60\xc5\x8d\x85\x5a\x0b\x68\x1a\x0c\xef\x82\xce\x21\x8e\xae\x6f\x95\x93\xc4\xd4\x5c\x34\xe9\xa2\x5d\x82\x67\x13\x19\x94\xf9\xf0\xbf\x7e\xfc\xee\xdb\xc8\x58\xcd\xe5\x8a\x2f\xb7\xc3\xfb\x5a\x8b\x29\x3c\x1d\x06\xff\x46\xf5\xd9\xe8\x97\xc9\xaf\xd1\x9a\x89\x1a\xc7\xce\xdf\x53\xf7\x7b\x22\x65\x0c\xcd\xe5\x14\x0e\x05\xee\x46\xa3\xd9\xf9\x64\xd9\xcb\xed\x1a\x0d\xda\x21\x11\x76\x39\xed\xd8\x46\x0c\x4a\xb4\x85\x72\x7d\x85\xc6\x4c\x49\x89\x99\x85\xba\x52\xb2\x31\x09\x08\x65\xcc\x1e\x88\x2d\x45\x7a\x0a\x8a\x86\x3e\x05\x89\x1b\xf8\x5f\x5c\xfc\xa8\xb2\x5b\xb4\xc3\xe1\x70\xc3\x65\xae\x36\x91\x50\xbe\x07\x8c\xa8\x83\x50\x99\x12\x90\xa6\x29\x34\x3d\x7c\x30\x82\xaf\x20\xd8\x18\xea\xe6\x03\x98\xd2\x25\x5d\x8d\xe0\x39\x1c\x4f\x2f\xa8\x46\x7d\x0e\x41\xcc\x2a\x1e\x8c\xfc\x76\x68\x0d\xaf\x64\x89\xc6\xb0\x15\xf6\x15\x74\x47\x72\x1d\xc8\x68\x1d\xa5\x59\x41\x0a\xce\x41\x15\xd3\x06\x3d\x49\x44\x21\xb9\x45\x1b\x61\xd6\x91\xa5\x29\xc8\x5a\x88\x3d\x48\xfd\xa6\x98\xb5\xf0\x3b\x20\x8f\x7c\x13\xfc\x45\x9a\x02\x45\x28\x32\x71\xbe\x9f\x49\xce\xf7\x91\x74\x14\x51\x90\xdc\xcf\x18\xcd\xfa\x68\x3e\xe0\x86\xf9\xef\xb1\xc3\xfc\x98\x1f\xe6\x0f\x30\x74\x89\xeb\x31\x7e\x3e\xd1\xf5\xd8\xb9\x07\x0f\x70\x93\x75\xb9\x40\xfd\x18\x3b\x9f\xb8\x1a\x76\xce\xd4\x6f\xa4\xed\xcd\x1d\xc3\xe5\x97\xa3\x07\xb8\xa3\xd6\xea\x41\xe6\x52\xd9\xed\xf0\x5e\xb0\xad\xaa\xed\x14\x06\x56\x55\xaf\x5d\xa6\x19\x8c\xdd\x71\xc0\x14\x3a\x0e\x63\xd7\x40\x4c\x61\xe0\xee\x68\x9c\x97\xe8\x66\xbd\x9c\x4c\x26\x63\x68\x8f\xe0\xff\xc2\x68\x13\xea\x1a\x77\x0f\xe8\x63\xea\x2c\x43\xf3\xa0\xf5\x3e\x48\xa3\x86\x47\xa7\x53\x73\xff\x09\x5a\x75\xb9\xe1\x40\x2d\xf8\xd3\x9f\xe0\x64\xf4\x10\xc6\x71\x0c\xff\xc3\xf4\xad\x3b\x89\xae\x34\xae\xdd\x69\x75\x47\x5f\x72\x63\xdc\x31\xb0\x81\x5c\x49\x6c\xe6\x7c\x5c\xd8\x3f\xd1\xb1\x21\x83\x39\x4c\x8e\x15\xa4\x70\xd8\x4b\x0b\x67\xb2\x45\x8f\xef\x61\x22\xb8\xd8\xf5\xe5\x1d\xcc\xe4\x25\xc2\x17\x29\x04\x41\x7f\xf2\x09\x05\x11\x74\xcc\x2e\x0c\xda\xb7\xde\x17\xc3\x26\x3b\x9e\xcb\x5d\xa3\x31\xd5\xca\x93\xd1\x89\x12\xbb\xbd\x79\x5f\x55\x15\xca\x1c\x98\xdc\xba\x90\xd8\xd9\xd6\x9d\x6a\x51\x53\x4d\x21\x4d\x50\x1f\x20\xfc\x81\x4a\x33\x95\x0c\xdc\x1c\xdb\xa7\x10\x5e\xce\xce\x64\xd1\x9e\x25\x7b\x4b\x3b\x76\xcf\x19\xdb\x1f\xbb\xe8\xd0\x66\x47\xc4\xe1\xe5\x81\x53\x0e\xfc\x75\xde\x31\x17\x9d\xde\x7c\x6f\xd1\x23\x77\xed\xfd\x75\x6c\xb3\x9e\xfe\x9e\xcf\xf3\xcb\x0f\x5c\x46\x37\x5c\xd5\xa6\x18\x1e\x29\x3a\x9a\x9d\xfa\xe6\x8d\x45\xcd\x2c\xba\x66\xc8\xf9\x02\xa5\xe5\x1a\x4f\x5c\xe2\xce\x11\x35\x86\x1a\x65\x8e\xba\x2d\x29\xfc\xb1\x23\x15\x80\x07\x2e\x73\x87\xda\x07\x70\xea\xad\xe8\xc4\xb6\x33\xe0\x30\xa7\x32\x0f\x78\x18\xf6\xd6\xe2\xea\x32\x25\x91\x1a\xe6\xa3\x9d\xe0\xd0\x7a\x00\x57\x22\x46\xc1\x2a\x83\x39\xa4\xe0\x5f\xa8\x0e\x47\x51\x2d\xf9\xdd\x70\x14\x36\xf7\xc7\x3c\xda\xf1\x59\x77\x84\xdd\xea\xfe\x3c\x85\x20\xb1\x9a\x6a\xee\x41\x00\xcf\xcf\xed\x43\x4a\xbd\x83\xf9\x5e\x83\xfe\x54\x80\xc4\xe6\x73\xd7\xcf\xf9\x5e\xe0\x9f\x41\xff\x8d\x6d\xad\xc5\xf0\x84\x2d\x5b\x33\xcb\xb4\xe3\x3a\x9a\xc1\x9e\xbc\x39\xc5\xce\xc8\x43\x33\xf0\x2d\x9f\xeb\xaa\xa1\x6b\x56\xdd\xdd\x42\xe9\x1c\x75\xa8\x59\xce\x6b\x33\x85\x17\xd5\xdd\xec\x9f\x6d\x33\xef\x1a\x84\x47\x55\xad\x34\xce\x4f\x34\x6a\x5e\x72\x3d\x87\x20\x89\x89\xe0\xf7\xd8\x74\x8b\xed\xbf\x8e\x85\x33\x6d\x10\x74\x2f\x4b\x9b\xe7\x25\xcf\x73\x81\xa4\xf0\x9e\x3d\xed\x48\xf2\x7f\x7f\x5f\x1d\x8a\x84\xa6\xff\xd9\xcf\xd9\x01\x0a\x83\x8f\x4c\xe8\x5a\xa9\x01\x01\x20\xa4\x25\x73\x67\xf3\xa6\x2b\x73\x8f\xf5\xc0\xd9\xa2\x79\x2d\x9f\xd7\xda\x15\x5c\xc3\xb0\x01\xd8\x18\x06\x86\x0a\xc0\xdc\x0c\x46\x51\x51\x97\x4c\xf2\xf7\x38\xa4\xe4\x34\xf2\xb6\x72\xbd\x59\x70\x1a\x97\x4f\x94\xd9\x37\xfc\x83\x36\xd1\x0d\x1a\x23\x0e\x5a\xef\xbe\xd8\xbf\x79\x98\xc2\x64\x36\xf8\x48\x0b\x9d\x97\x12\x2e\x98\x86\xfe\x4d\xd8\x66\x60\xd0\x8a\xa4\xb7\x63\x0b\xa6\x07\xbe\x2f\x75\x45\xba\x54\x9b\x74\x70\x3d\xe9\x94\xf4\x8e\x76\x7e\x1e\x34\x58\x3b\x71\x06\x69\xd9\x6e\xcd\x39\x5c\x4f\x3e\x87\xb6\xfe\x5d\xcd\xd1\x0a\xac\xe6\x15\xe6\xc0\x32\xcb\xd7\xf8\x2f\x58\xc8\x67\x30\xf2\x47\xab\x48\x38\x6c\x8d\xe7\x60\x7a\xa0\x2f\x8d\x76\xb6\xfd\x77\xda\x6f\x10\x3b\x0b\x3f\x87\xe0\xec\x42\x1e\x44\xe2\x11\xe1\xd1\xd6\x7e\x78\xdf\xbb\xc3\x86\xe0\x38\xb1\x50\xc9\xdb\x1d\x93\x8d\xa2\xc2\x96\x62\x18\x24\xd6\x7d\x36\x41\x3a\x77\x1c\x1c\x03\xff\xf8\xb0\xae\xdb\x1d\x76\x33\xd4\xc4\xe3\x51\xb3\x05\xbd\x0a\xa5\x6b\xc8\xda\x72\x04\x76\xfb\xaf\x4b\xe2\x18\x7e\xb4\x4c\x5b\x60\xf0\xd3\x1b\xa8\xab\x9c\x59\x4a\x61\x0a\x28\x49\xfa\x37\xf5\xed\xe7\x27\x0b\xa6\x0d\x2c\x95\xde\x30\x9d\x37\x6f\x90\x6c\x81\x5b\xf7\x25\x41\x5b\xff\x19\xb4\x6f\x28\x8a\xad\x99\x18\x9e\x34\x7f\x4f\x87\x83\xa8\xef\xf2\xc1\x28\x42\x96\x15\xa7\x84\x2e\x63\x75\x72\x53\xf8\xd6\xf5\x01\xc3\xa7\x43\x5b\x70\x33\x8a\x98\xb5\x7a\x38\x38\x00\xc3\x60\x44\x7e\xbd\xec\xf5\x65\xdd\xf4\xe4\x60\x5b\x3d\xc6\x63\x5f\x51\x77\xd5\x40\x4b\x9e\x19\x33\xf4\xb8\x1a\x8c\x7b\xbc\x0f\x61\x35\x78\x36\xe8\x1c\xb5\xdf\xde\xfb\x75\xa4\x67\x35\x39\x60\x3d\xa0\x5d\x36\x38\x11\xcf\xf2\xfc\x35\xed\x9f\x61\x70\x66\xa7\x1f\xa3\x63\xd4\x19\xdb\xc7\xeb\x47\xad\xec\x0f\xe8\x1f\x30\x31\xcf\x07\xa3\xc8\xd4\x0b\x7f\x40\x31\x7c\xd9\x75\x61\x2d\x99\x03\xef\x71\x2a\x38\x29\x28\x48\xc4\x61\x51\x11\x1e\x15\x21\x8f\x64\x8d\x46\xa4\x5f\xd5\x6e\x4c\x06\x9f\x8c\xba\xf3\xad\xaf\x0d\x55\x58\xdc\x14\xc0\x60\x83\x0b\xe3\x8e\x13\xa0\xc1\xbb\x3b\xd2\xf1\x47\x37\xaf\xbe\x7f\xd3\x3b\xbe\xe9\x76\xc4\xd0\x71\xef\xbe\x29\x3b\x77\x58\x72\xf6\x23\xb6\xcd\x66\x13\xad\x94\x5a\x09\xff\xf9\x5a\x77\x9a\x12\xb3\x8a\x47\xef\x4c\x00\xcc\x6c\x65\x06\x39\x2e\x51\xcf\x7b\xec\x9b\x23\x96\x24\xf6\x1f\x49\x25\xb1\xff\x8a\xf4\xff\x03\x00\x00\xff\xff\xa1\xee\xe7\x70\x56\x2a\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
