// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// faucet.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\x6d\x93\xdb\x36\x92\xfe\x3c\xfe\x15\x1d\x9e\xbd\x92\xce\x43\x52\x33\x63\x67\x7d\x12\xa9\x94\xd7\xc9\xee\xf9\x2e\x97\xa4\x36\x4e\xdd\xa6\xb2\xa9\x2b\x90\x6c\x89\xf0\x80\x00\x03\x80\xd2\x28\x53\xfa\xef\x57\x0d\x90\x14\xf5\x32\x13\x3b\xce\xce\x07\x0d\x09\x34\xba\x1b\xdd\x0f\xfa\x05\x52\xf2\xd9\x97\xdf\xbe\x79\xf7\xe3\x77\x5f\x41\x69\x2b\xb1\x78\x92\xd0\x3f\x10\x4c\xae\xd2\x00\x65\xb0\x78\x72\x91\x94\xc8\x8a\xc5\x93\x8b\x8b\xa4\x42\xcb\x20\x2f\x99\x36\x68\xd3\xa0\xb1\xcb\xf0\x55\xb0\x9f\x28\xad\xad\x43\xfc\xa5\xe1\xeb\x34\xf8\x47\xf8\xc3\xeb\xf0\x8d\xaa\x6a\x66\x79\x26\x30\x80\x5c\x49\x8b\xd2\xa6\xc1\xdb\xaf\x52\x2c\x56\x38\x58\x27\x59\x85\x69\xb0\xe6\xb8\xa9\x95\xb6\x03\xd2\x0d\x2f\x6c\x99\x16\xb8\xe6\x39\x86\xee\xe5\x12\xb8\xe4\x96\x33\x11\x9a\x9c\x09\x4c\xaf\x82\xc5\x13\xe2\x63\xb9\x15\xb8\xf8\xfa\x87\xff\xfe\xfe\x5b\xf8\xfa\xea\x25\xbc\x43\x63\x25\x5a\xf8\x2b\x6b\x72\xb4\x49\xec\xe7\x1d\xa9\xe0\xf2\x16\x4a\x8d\xcb\x34\x20\x85\xcd\x2c\x8e\xf3\x42\xbe\x37\x51\x2e\x54\x53\x2c\x05\xd3\x18\xe5\xaa\x8a\xd9\x7b\x76\x17\x0b\x9e\x99\xd8\x6e\xb8\xb5\xa8\xc3\x4c\x29\x6b\xac\x66\x75\x7c\x13\xdd\x44\x7f\x8e\x73\x63\xe2\x7e\x2c\xaa\xb8\x8c\x72\x63\x02\xd0\x28\xd2\xc0\xd8\xad\x40\x53\x22\xda\x00\xe2\xc5\xef\x93\xbb\x54\xd2\x86\x6c\x83\x46\x55\x18\xbf\x88\xfe\x1c\x4d\x9d\xc8\xe1\xf0\xe3\x52\x49\xac\xc9\x35\xaf\x2d\x18\x9d\x7f\xb0\xdc\xf7\xbf\x34\xa8\xb7\xf1\x4d\x74\x15\x5d\xb5\x2f\x4e\xce\x7b\x13\x2c\x92\xd8\x33\x5c\x7c\x12\xef\x50\x2a\xbb\x8d\xaf\xa3\x17\xd1\x55\x5c\xb3\xfc\x96\xad\xb0\xe8\x24\xd1\x54\xd4\x0d\xfe\x61\x72\x1f\xf2\xe1\xfb\x63\x17\xfe\x11\xc2\x2a\x55\xa1\xb4\xd1\x7b\x13\x5f\x47\x57\xaf\xa2\x69\x37\x70\xca\xdf\x09\x20\xa7\x91\xa8\x8b\x4c\x15\x5b\xb8\xa7\xa7\x8b\x8c\xe5\xb7\x2b\xad\x1a\x59\xcc\x40\xaf\x32\x36\xbe\x7e\xf1\xea\x12\xae\xa7\xff\x41\x1f\xaf\x2e\x61\x1a\xbd\xbc\x9a\xcc\x89\x74\x47\x1f\xd1\x1a\xb5\xe5\x39\x13\x61\x8e\xd2\xa2\x6e\xb9\x54\x5c\x86\x25\xf2\x55\x69\x67\x70\x35\x9d\x3e\x9b\x9f\x1b\x5d\x97\x7e\xb8\xe0\xa6\x16\x6c\x3b\x83\xa5\xc0\x3b\x3f\xc4\x04\x5f\xc9\x90\x5b\xac\xcc\x0c\x3c\xe7\x81\xcc\x5a\xab\x95\x46\x63\x5a\x61\xb5\x32\xdc\x72\x25\x67\x84\x45\x66\xf9\x1a\xcf\xd1\x9a\x9a\xc9\x93\x05\x2c\x33\x4a\x34\x16\x8f\x14\xc9\x84\xca\x6f\xfd\x98\x3b\xfd\xc3\x4d\xe4\x4a\x28\x3d\x83\x4d\xc9\xdb\x65\xe0\x04\x41\xad\xb1\x65\x0f\x35\x2b\x0a\x2e\x57\x33\xf8\xbc\x6e\xf7\x03\x15\xd3\x2b\x2e\x67\x30\xdd\x2f\x49\xe2\xce\x01\x49\xec\x03\xdd\x93\x8b\x84\x3c\xe1\xbc\x5f\xf0\x35\xe4\x82\x19\x93\x06\x47\x26\x76\x01\xec\x80\x80\xe2\x16\xe3\xb2\x9b\x3a\x98\xd3\x6a\x13\x80\x13\x94\x06\x5e\x89\x30\x53\xd6\xaa\x6a\x06\x57\xa4\x5e\xbb\xe4\x88\x9f\x08\xc5\x2a\xbc\xba\xee\x26\x2f\x92\xf2\xaa\x63\x62\xf1\xce\x86\xce\x3f\xbd\x67\x82\x45\xc2\xbb\xb5\x4b\x06\x4b\x16\x66\xcc\x96\x01\x30\xcd\x59\x58\xf2\xa2\x40\x99\x06\x56\x37\x48\x08\xe4\x0b\x38\x0d\x97\xaf\x1b\x5b\xa2\xa4\x5d\x5a\x2c\xfa\xe0\x59\x5e\x75\xca\xc5\x05\x5f\xb7\x7b\x1b\x3c\x1e\x6d\xf3\xe1\x9d\xbc\x82\xf6\x41\x2d\x97\x06\x6d\x38\xd8\xd8\x80\x98\xcb\xba\xb1\x21\x81\xbf\xee\xe7\x2f\x12\x37\x0a\xbc\x48\x83\x46\x8b\xa0\xcd\x19\xee\xd1\x6e\xeb\xd6\x1e\x41\xbf\x7b\xa5\xab\x90\xdc\xa1\x95\x08\xa0\x16\x2c\xc7\x52\x89\x02\x75\x1a\xbc\xf3\x81\x00\x6a\x65\x2c\xfc\xf0\xf7\xaf\xa1\xf5\x1a\x97\x2b\xd8\xaa\x46\x0f\xac\x62\x5b\xab\xb0\xa2\x20\xe8\x06\xf1\x5e\x1b\x87\xe2\x53\x7d\xc3\xcc\xca\xbd\xce\x17\x49\xd6\x58\xab\x7a\xc2\xcc\x4a\xc8\xac\x0c\x0b\x5c\xb2\x46\x58\x28\xb4\xaa\x0b\xb5\x91\xa1\x55\xab\x15\xe5\x48\xbf\x13\xbf\x28\x80\x82\x59\xd6\x4e\xa5\x41\x47\xdb\x79\x93\x99\x5a\xd5\x4d\xdd\xfa\xd3\x0f\xe2\x5d\xcd\x64\x81\x05\x79\x5f\x18\x0c\x16\x7f\xe3\x6b\x84\x0a\xe1\xeb\x1f\xff\x61\x2f\x8e\xb1\x91\x33\x8d\x36\x1c\xf2\x3c\x41\x48\x12\x7b\x5d\xfc\x8e\xa0\xfd\x4b\x1a\xd1\x71\xea\x77\x50\xa1\x6c\xe0\xe0\x2d\xd4\x14\x60\x82\xc5\xfd\xbd\x66\x72\x85\xf0\x94\x17\x77\x97\xf0\x94\x55\xaa\x91\x16\x66\x29\x44\xaf\xdd\xa3\xd9\xed\x0e\xb8\x03\x24\x82\x2f\x12\xf6\x18\xce\x41\xc9\x5c\xf0\xfc\x36\x0d\x2c\x47\x9d\xde\xdf\x13\xf3\xdd\x6e\x0e\xf7\xf7\x7c\x09\x4f\xa3\xbf\x63\xce\x6a\x9b\x97\x6c\xb7\x5b\xe9\xee\x39\xc2\x3b\xcc\x1b\x8b\xe3\xc9\xfd\x3d\x0a\x83\xbb\x9d\x69\xb2\x8a\xdb\x71\xb7\x9c\xc6\x65\xb1\xdb\x91\xce\xad\x9e\xbb\x1d\xc4\xc4\x54\x16\x78\x07\x4f\xa3\xef\x50\x73\x55\x18\xf0\xf4\x49\xcc\x16\x49\x2c\xf8\xa2\x5d\x77\x68\xa4\xb8\x11\x7b\xb8\xc4\x84\x97\x1e\xeb\xee\xe8\x38\x55\x87\x9a\x9e\x39\x09\xab\xb0\xd7\xbe\x85\x83\xe1\x16\x6f\x71\x9b\x06\xf7\xf7\xc3\xb5\xed\x6c\xce\x84\xa0\xc4\x91\x06\x7e\x6b\xfd\xa2\x5f\x91\x60\xba\xe6\xc6\xd5\x62\x8b\x4e\x83\xbd\xda\x1f\x78\xb4\x8f\x22\x98\x55\xf5\x0c\x6e\xae\x07\xe1\xeb\xdc\xa9\xff\xfc\xe8\xd4\xdf\x9c\x25\xae\x99\x44\x01\xee\x33\x34\x15\x13\xdd\x73\x7b\x58\x06\x91\xe0\x78\x51\x48\xc1\xba\x57\xad\x0f\xfa\xd3\x39\xa8\x35\xea\xa5\x50\x9b\x19\xb0\xc6\xaa\x39\x54\xec\xae\x4f\x7c\x37\xd3\xe9\x50\x6f\xaa\x21\x59\x26\xd0\x45\x18\x8d\xbf\x34\x68\xac\xe9\xe3\x89\x9f\x72\x9f\x14\x56\x0a\x94\x06\x8b\x23\x6b\x90\x44\x32\xad\xa3\x1a\xb8\xbe\x37\xe6\x59\xdd\x97\x4a\xf5\xb9\x64\xa8\x46\xcb\x7a\x90\xf6\x82\x45\x62\xf5\x9e\xee\x22\xb1\xc5\x47\xe5\x02\x4d\x55\xe2\x43\xa9\xc0\x07\x34\xda\x7b\x8d\xa8\x7d\x89\x42\x90\x05\xf7\x9a\xc4\xb6\xf8\x04\xc9\x04\xc2\x8c\x19\xfc\x10\xf1\x2e\xe5\xef\xc5\xbb\xd7\x4f\x95\x5f\x22\xd3\x36\x43\x66\x3f\x44\x81\x65\x23\x8b\xc1\xfe\x29\x74\x7e\xa2\xf8\x46\xf2\x35\x6a\xc3\xed\xf6\x43\xe5\x63\xb1\x57\xc0\xbf\x1f\xaa\x90\xc4\x56\x3f\x8e\xb4\xe1\xcb\xef\x3a\xda\xbf\xab\x38\xb9\xe9\xcf\x0b\xd9\xa5\x2b\x93\xfe\x53\x6d\xa0\x50\x68\xc0\x96\xdc\xc0\x46\xe9\xdb\x2f\x92\xb8\xbc\xe9\x97\xd5\x8b\x77\x34\x41\x96\x86\xa5\x2b\x39\x80\x1b\xd0\x8d\x74\x39\x59\x49\xb0\x25\xc2\xfd\x7d\xf4\x0d\x5a\x5a\xbc\xdb\x81\xf4\x4f\x11\xbc\x53\x54\xef\xad\x51\x5a\xa8\x98\xe0\x39\x57\x8d\x01\x96\x5b\xa5\x0d\x2c\xb5\xaa\x00\xef\x4a\xd6\x18\x4b\x8c\x28\xa4\xb0\x35\xe3\xc2\x9d\x2f\xe7\x66\x50\x1a\x58\x9e\x37\x55\x43\xf5\xaa\x5c\x01\x4a\xd5\xac\x4a\xaf\x8a\x55\xe0\x73\x95\x50\x72\xd5\xab\x63\x6a\x56\x01\xb3\x96\xe5\xb7\xe6\x12\xba\x40\x01\x4c\x23\x58\x8e\x05\xad\xca\x55\x55\x29\x09\x37\xba\x80\x9a\x69\xbb\x05\xa3\x72\xce\x44\xa7\x35\x49\x74\x89\x2f\x82\xd7\x72\xab\x24\x42\xc9\xd6\x4e\x41\xe8\x6a\x13\xa5\xe1\xaf\x2c\xc7\x4c\xa9\x9e\x1a\x2a\xb6\xed\xc4\xb5\xca\x6f\xb8\x2d\xb9\xb7\x4e\x8d\xba\xa2\xa5\x05\x08\x5e\x71\x6b\xa2\x24\xae\xf7\x41\x76\x9f\xae\x45\x58\x2a\xcd\x7f\xa5\x8a\x47\x0c\x23\xaa\x3d\x8a\x37\x5d\xb8\x74\x50\x10\xb8\xb4\x33\x78\xe1\xc3\xe5\x31\xb8\xdb\xbe\xea\x1c\xb2\x3b\x9e\xae\x5f\xa5\x1c\x34\x83\x1b\x8f\x26\x5f\x5b\x14\x76\xa0\x41\x71\x84\x3f\x2f\xf4\xd5\xab\xfa\xae\xd7\xa3\x87\xe4\xb4\x67\x42\x00\x38\x34\xca\x9a\xf7\x66\xbc\x84\x8a\xdd\x22\x30\x48\xd8\x51\xdf\xdd\x2a\xed\xba\x36\xee\xee\x1a\x62\xbb\x41\xb4\x5f\x10\x6e\xd3\x2f\x91\xe9\x67\xd7\x53\x57\x07\xd2\xff\xab\x97\xcf\xae\xa7\x1e\x98\xcf\xae\xdf\x3c\xbb\x9e\xd6\x02\x99\xc1\x67\xd7\x53\x83\xb2\xa0\x7f\xaa\xa2\x37\x42\xcd\xb3\xeb\xa9\x55\xcf\xa6\xaf\xa7\x77\xd3\x0f\xfc\x0b\xc0\x32\xbd\x42\x9b\x06\xff\xc7\x32\xd5\xd8\x59\x26\x98\xbc\x0d\x16\x4e\x21\x2a\x31\x9c\x9f\xdb\xd2\x94\x70\xd9\x56\xa3\x50\x33\x43\x0e\xe7\xd2\x2a\x87\x81\xf6\xd6\xc4\xc0\xd8\x34\xda\x75\x8e\x04\x2a\xda\x91\x3b\x7d\x72\x44\x18\xa2\x6d\x4f\xa2\x24\xd3\xf1\xe2\x8d\xaa\xb7\xa1\x63\xe2\x96\x9f\x18\xc9\x34\x75\xad\xb4\x8d\x86\xc6\x62\xd4\x01\x09\x34\xf1\xab\xe9\xcb\x57\x9f\x3f\xaa\xba\xa1\xe2\xda\xe9\xdf\x6b\xc8\x32\xb5\x46\xf0\x85\x7c\xa6\xee\x80\xc9\x02\x96\x5c\x23\xb0\x0d\xdb\x7e\x96\xc4\x85\xeb\xbd\xfc\x9f\x2f\x8f\xbe\x51\xd4\x91\xf4\xb5\x91\x43\xea\x30\xc4\x14\x54\x5a\xea\xe0\x77\xa3\xb7\x91\x94\x5f\x42\x26\xce\xa6\x86\x8f\x04\xf0\x23\x8a\x7d\x22\xa8\x13\x63\xb5\x92\xab\x05\x21\x41\x35\x96\x36\xd8\xb5\x69\x5c\x49\x6a\x60\xdd\xf4\x25\x18\x5e\xd5\x62\x0b\xf9\xde\xb5\xa7\xb8\x79\xd0\x1d\xbf\x89\x9b\x43\x87\x79\x14\xb9\xd0\x5d\xa9\x02\x29\x66\x9b\xc6\xe4\x58\xbb\x0b\x3f\x0a\x84\x7f\xd9\xfe\xca\xa4\xe5\x12\xbb\x80\x19\xc1\xb7\x52\x6c\xa1\x31\x08\x4b\xa5\xa1\xc0\xac\x59\xad\x5c\x90\xd7\x50\x6b\xbe\x66\x16\xbb\x28\x69\x5a\x3c\xf4\x70\x18\xd4\xaa\x94\xc6\xc4\x20\x7d\xfc\xa8\x1a\xc8\x99\x04\xab\x59\x7e\xeb\xcf\x42\xa3\x35\x25\x85\x1a\xfd\x6e\xfa\x38\x9d\xa1\x50\x1b\x47\xe2\xf7\xbd\xe4\x28\x5c\xd0\x36\x88\x50\xaa\x0d\x54\x4d\xee\x0e\x1b\x05\x65\xb7\x89\x0d\xe3\x16\x1a\x69\xb9\xf0\xb6\xb4\x8d\x96\x14\xe2\xf1\x20\xc8\x9e\x54\xf3\x09\x56\x8b\x77\x25\x9e\x49\x68\x7d\x1d\x0e\x1a\xdf\x78\x72\xa8\xb5\xb2\x98\x93\x33\x81\xad\x18\x97\x86\x3c\xe2\xc2\x38\x56\x1f\x50\xa7\xf7\x4f\xed\xc3\xfe\xda\xca\x4d\xc7\x31\xfc\x4d\xa8\x8c\x09\x58\x13\xc8\x33\x41\xb9\x58\x01\x75\xc4\x07\xd6\x32\x96\xd9\xc6\x80\x5a\xba\x51\xaf\x39\xad\x5f\x33\x4d\x1e\xc4\xaa\xb6\x90\xb6\x57\x27\x34\x66\x50\xaf\xdb\x0b\x21\x7a\xa5\x5e\xec\x60\xbe\xb7\x7a\x0a\x3f\xfd\x3c\x7f\xd2\xaa\xf2\x25\x2e\x1d\x24\x08\xdb\x7e\xcb\xb6\x64\x16\x72\x8d\xcc\xa2\x81\x5c\x28\xd3\x68\xaf\x21\x35\x94\x40\x5a\x76\x9c\x3a\xce\x34\x51\x3b\x69\x1d\x93\x71\xc9\x4c\x39\x69\x6f\x7e\x34\x3a\x2f\xf5\x73\xdd\xf8\x05\xa1\x6e\x4c\x0c\x78\x3a\x9d\x03\x4f\x3a\xbe\x91\x40\xb9\xb2\xe5\x1c\xf8\xf3\xe7\x3d\xf1\x05\x5f\xc2\xb8\xa3\xf8\x89\xff\x1c\xd9\xbb\x88\xa4\x40\x9a\xc2\x50\x9a\x13\xd8\xf2\x31\xb5\xe0\x39\x8e\xf9\x25\xb4\xb7\x73\xf4\x97\x69\x64\xb7\xdd\x5b\xeb\x47\xff\xcf\x7d\xee\xe6\x87\x96\x71\xc6\x3f\xb0\x8d\xef\xe6\x0c\x30\x58\x71\x63\xa1\xd1\x02\xda\x33\xec\x5d\xd0\x3b\xc4\xd1\x0d\xad\x72\x82\xcb\xf6\xa1\xc5\x54\xb7\x05\xcf\x26\xa2\x7c\x36\xfe\xaf\xef\xbf\xfd\x26\x32\x56\x73\xb9\xe2\xcb\xed\xf8\xbe\xd1\x62\x06\x4f\xc7\xc1\xbf\x35\x5a\x04\x93\x9f\xa6\x3f\x47\x6b\x26\x1a\xbc\x74\xfe\x9e\xb9\xcf\x13\x29\x97\xd0\x3e\xce\xe0\x50\xe0\x6e\x32\x99\x9f\xef\x7c\x07\x8d\xba\x46\x83\x76\x4c\x84\x3d\xf0\x8f\x6d\xc4\xa0\x42\x5b\x2a\x77\x74\x35\xe6\x4a\x4a\xcc\x2d\x34\xb5\x92\xad\x49\x40\x28\x63\xf6\x40\xec\x28\xd2\x53\x50\xb4\xf4\x29\x48\xdc\xc0\xff\x62\xf6\xbd\xca\x6f\xd1\x8e\xc7\xe3\x0d\x97\x85\xda\x44\x42\xf9\x30\x1b\xd1\x21\x55\xb9\x12\x90\xa6\x29\xb4\x69\x32\x98\xc0\x17\x10\x6c\x0c\x25\xcc\x00\x66\xf4\x48\x4f\x13\x78\x0e\xc7\xcb\x4b\x65\x2c\x3c\x87\x20\x66\x35\x0f\x26\xfe\x38\x74\x86\x57\xb2\x42\x63\xd8\x0a\x87\x0a\xba\xba\xb6\x07\x19\xed\xa3\x32\x2b\x48\xc1\x39\xa8\x66\xda\xa0\x27\x89\xa8\xbf\xea\xd0\x46\x98\x75\x64\x69\x0a\xb2\x11\x62\x0f\x52\x7f\x28\xe6\x1d\xfc\x0e\xc8\x23\x9f\x67\x3e\x4b\x53\xa0\x76\x83\x4c\x5c\xec\x57\x92\xf3\x7d\x5b\x34\x89\x28\x2f\xec\x57\x4c\xe6\x43\x34\x1f\x70\xc3\xe2\xb7\xd8\x61\x71\xcc\x0f\x8b\x07\x18\xba\x2e\xf4\x31\x7e\xbe\x6b\x1d\xb0\x73\x03\x0f\x70\x93\x4d\x95\xa1\x7e\x8c\x9d\xef\x42\x5b\x76\xce\xd4\x6f\xa5\x1d\xac\xbd\x84\xab\xcf\x27\x0f\x70\x47\xad\xd5\x83\xcc\xa5\xb2\xdb\xf1\xbd\x60\x5b\x2a\x97\x60\x64\x55\xfd\xc6\x75\x49\xa3\x4b\x97\x71\x67\xd0\x73\xb8\x74\xb7\x81\x33\x18\xb9\x37\x9a\xe7\x15\xba\x55\x2f\xa7\xd3\xe9\x25\x74\x17\xea\x7f\x61\x74\x08\x75\x83\xbb\x07\xf4\x31\x4d\x9e\x53\xde\xff\x14\x8d\x5a\x1e\xbd\x4e\xed\xfb\x27\x68\xd5\xe7\x86\x03\xb5\xe0\x4f\x7f\x82\x93\xd9\x43\x18\xc7\x31\xfc\x0f\xa3\x2e\x4a\x08\xd7\xfb\xb9\x96\xaf\xa7\xaf\xb8\x31\xae\x97\x32\x50\x28\x89\xed\x9a\x8f\x0b\xfb\x27\x3a\xb6\x64\xb0\x80\xe9\xb1\x82\x14\x0e\x07\x69\xe1\x4c\xb6\x18\xf0\x3d\x4c\x04\x17\xbb\xa1\xbc\x83\x95\xbc\x42\xf8\x2c\x85\x20\x18\x2e\x3e\xa1\x20\x82\x9e\xd9\x85\x41\xfb\xce\xfb\x62\xdc\x66\xc7\x73\xb9\x6b\x72\x09\x37\xd3\xe9\x74\x72\xa2\xc4\x6e\x6f\xde\xd7\x35\x95\x4d\xc0\xe4\xd6\x85\xc4\xde\xb6\xae\x70\xa4\x12\x88\x42\x9a\x80\x5c\x09\xe1\x6b\x96\x76\x29\x19\xb8\xed\x7d\x53\x08\xaf\xe6\x67\xb2\xe8\xc0\x92\x83\xad\x1d\xbb\xe7\x8c\xed\x8f\x5d\x74\x68\xb3\x23\xe2\xf0\xea\xc0\x29\x07\xfe\x3a\xef\x98\x8b\x5e\x6f\xbe\xb7\xe8\x91\xbb\xf6\xfe\x3a\xb6\xd9\x40\x7f\xcf\xe7\xf9\xd5\x07\x6e\xa3\x9f\xae\x1b\x53\x8e\x8f\x14\x9d\xcc\x4f\x7d\xf3\xd6\xa2\xa6\x2a\x59\x51\xca\x22\x5f\x50\x1b\xa0\xf1\xc4\x25\xae\x54\xd7\x18\x6a\x94\x05\xea\xae\xa4\xf0\x95\x3d\x15\x80\x07\x2e\x73\x7d\xe3\x01\x9c\x06\x3b\x3a\xb1\xed\x1c\x38\x2c\xa8\xcc\x03\x1e\x86\x83\xbd\xb8\xba\x4c\x49\x04\x00\x38\x3a\x09\x0e\xad\x07\x70\x25\x62\x14\xac\x36\x58\x40\x0a\xfe\xeb\xd1\xf1\x24\x6a\x24\xbf\x1b\x4f\xc2\xf6\xfd\x98\x47\x37\x3f\xef\xbb\xc4\x4e\xf7\xe7\x29\x04\x89\xd5\xc0\x8b\x74\x14\xc0\xf3\x73\xe7\x90\x52\xef\x68\xb1\xd7\x60\xb8\x14\x20\xb1\xc5\xc2\xdd\x6e\xf9\x86\xed\x9f\xc1\xf0\xfb\xd7\x46\x8b\xf1\x09\x5b\xb6\x66\x96\x69\xc7\x75\x32\x87\x3d\x79\xdb\x28\xe6\xe4\xa1\x39\xf8\x8e\xd4\x5d\x91\x43\x7f\xf3\xec\xde\x32\xa5\x0b\xd4\xa1\x66\x05\x6f\xcc\x0c\x5e\xd4\x77\xf3\x7f\x76\x37\xf3\xee\xb6\xef\x51\x55\x6b\x8d\x8b\x13\x8d\xda\x9b\xa2\xe7\x10\x24\x31\x11\xfc\x16\x9b\x7e\xb3\xc3\x2f\x57\xe1\xcc\x9d\x26\xf4\x5f\x7d\xb6\xe3\x15\x2f\x0a\x81\xa4\xf0\x9e\x3d\x9d\x48\xf2\xff\xf0\x5c\x1d\x8a\x84\xf6\x32\x73\xbf\x66\x07\x28\x0c\x3e\xb2\xa0\xbf\x17\x1d\x11\x00\x42\xda\x32\x77\x36\x6f\xbb\x6d\x37\xac\x47\xce\x16\xed\x97\xec\x45\xa3\x5d\xc1\x35\x0e\x5b\x80\x5d\xc2\xc8\x50\x01\x58\x98\xd1\x24\x2a\x9b\x8a\x49\xfe\x2b\x8e\x29\x39\x4d\xbc\xad\xdc\x45\x6b\x70\x1a\x97\x4f\x94\xd9\x5f\x7f\x8e\xba\x44\x37\x6a\x8d\x38\xea\xbc\xfb\x62\xdf\xdc\xcf\x60\x3a\x1f\x7d\xa4\x85\xce\x4b\x09\x33\xa6\x61\xf8\x12\x76\x19\x18\xb4\x22\xe9\xdd\x5c\xc6\xf4\xc8\xdf\x64\xb8\x22\x5d\xaa\x4d\x3a\xba\x99\xf6\x4a\x7a\x47\x3b\x3f\x8f\x5a\xac\x9d\x38\x83\xb4\xec\x8e\xe6\x02\x6e\xa6\x7f\x84\xb6\xfe\x3a\xe4\x68\x07\x56\xf3\x1a\x0b\x60\xb9\xe5\x6b\xfc\x17\x6c\xe4\x0f\x30\xf2\x47\xab\x48\x38\xec\x8c\xe7\x60\x7a\xa0\x2f\xcd\xf6\xb6\xfd\x77\x3a\x6f\x10\x3b\x0b\x3f\x87\xe0\xec\x46\x1e\x44\xe2\x11\xe1\xd1\xd1\x7e\xf8\xdc\xbb\x6f\x0e\x82\xe3\xc4\x42\x25\x6f\xff\x9d\xd7\x24\x2a\x6d\x25\xc6\x41\x62\xdd\x8f\x20\x48\xe7\x9e\x83\x63\xe0\x87\x0f\xeb\xba\xdd\x61\x37\x43\x4d\x3c\x1e\x35\x5b\x30\xa8\x50\xfa\x86\xac\x2b\x47\x60\xb7\xff\xad\x48\x1c\xc3\xf7\x96\x69\x0b\x0c\x7e\x78\x0b\x4d\x5d\x30\x4b\x29\x4c\x01\x25\x49\x7f\xdd\xdd\xfd\x98\x24\x63\xda\xc0\x52\xe9\x0d\xd3\x45\x7b\x49\x63\x4b\xdc\xba\xeb\xf8\xae\xfe\x33\x68\xdf\x52\x14\x5b\x33\x31\x3e\x69\xfe\x9e\x8e\x47\xd1\xd0\xe5\xa3\x49\x84\x2c\x2f\x4f\x09\x5d\xc6\xea\xe5\xa6\xf0\x8d\xeb\x03\xc6\x4f\xc7\xb6\xe4\x66\x12\x31\x6b\xf5\x78\x74\x00\x86\xd1\x84\xfc\x7a\x35\xe8\xcb\xfa\xe5\xc9\xc1\xb1\x7a\x8c\xc7\xbe\xa2\xee\xab\x81\x8e\x3c\x37\x66\xec\x71\x35\xba\x1c\xf0\x3e\x84\xd5\xe8\xd9\xa8\x77\xd4\xfe\x78\xef\xf7\x91\x9e\xd5\xe4\x80\xf5\x88\x4e\xd9\xe8\x44\x3c\x2b\x8a\x37\x74\x7e\xc6\xc1\x99\x93\x7e\x8c\x8e\x49\x6f\x6c\x1f\xaf\x1f\xb5\xb2\xff\xb6\xfd\x01\x13\xf3\x62\x34\x89\x4c\x93\xf9\x0b\x8a\xf1\xcb\xbe\x0b\xeb\xc8\x1c\x78\x8f\x53\xc1\x49\x41\x41\x22\x0e\x8b\x8a\xf0\xa8\x08\x79\x24\x6b\xb4\x22\xfd\xae\x76\x97\x64\xf0\xe9\xa4\xbf\xdf\xfa\xca\x50\x85\xc5\x4d\x09\x0c\x36\x98\x19\x77\x9d\x00\x2d\xde\xdd\x95\x8e\xbf\xba\x79\xfd\xdd\xdb\xc1\xf5\x4d\x7f\x22\xc6\x8e\x7b\xff\x0b\xb1\x73\x97\x25\x67\x7f\x92\xb6\xd9\x6c\xa2\x95\x52\x2b\xe1\x7f\x8c\xd6\xdf\xa6\xc4\xac\xe6\xd1\x7b\x13\x00\x33\x5b\x99\x43\x81\x4b\xd4\x8b\x01\xfb\xf6\x8a\x25\x89\xfd\x4f\x9e\x92\xd8\xff\x0a\xf4\xff\x03\x00\x00\xff\xff\x9e\x23\xf2\xca\x16\x2a\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
